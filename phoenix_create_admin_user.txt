#!/bin/bash
# phoenix_create_admin_user.sh
# Creates a system and Proxmox VE admin user with sudo privileges and optional SSH key configuration for the Phoenix server.
# Version: 1.2.1 (Revised for common.sh integration)
# Author: Heads, Grok, Devstral
# Usage: Called by create_phoenix.sh with -u and -p

# Source common functions for shared utilities like logging, check_root, retry_command
# Assumes LOGFILE is set by the orchestrator (create_phoenix.sh)
source /usr/local/bin/common.sh || { echo "[$(date)] Error: Failed to source common.sh" | tee -a /dev/stderr; exit 1; }

# Parse command-line options
USERNAME=""
PASSWORD=""
SSH_PUBLIC_KEY=""
while getopts "u:p:s:" opt; do
  case $opt in
    u) USERNAME="$OPTARG" ;;
    p) PASSWORD="$OPTARG" ;;
    s) SSH_PUBLIC_KEY="$OPTARG" ;;
    \?) echo "[$(date)] Invalid option: -$OPTARG" | tee -a "$LOGFILE" >&2; exit 1 ;;
    :)  echo "[$(date)] Option -$OPTARG requires an argument." | tee -a "$LOGFILE" >&2; exit 1 ;;
  esac
done

# Validate required arguments
if [[ -z "$USERNAME" ]]; then
    echo "[$(date)] Error: Username (-u) is required." | tee -a "$LOGFILE"
    exit 1
fi

# --- Add the missing function definitions here ---

# Function to create the system user
create_system_user() {
  echo "[$(date)] Creating system user: $USERNAME" >> "$LOGFILE"
  if id "$USERNAME" &>/dev/null; then
    echo "[$(date)] User $USERNAME already exists, skipping creation" >> "$LOGFILE"
    return 0
  fi

  # Create user
  if [[ -n "$PASSWORD" ]]; then
      # Create user without password initially to avoid issues with special chars in retry_command
      retry_command "useradd -m -s /bin/bash $USERNAME" || {
        echo "[$(date)] Error: Failed to create system user $USERNAME (useradd)" | tee -a "$LOGFILE"
        exit 1
      }
      # Set password using chpasswd, which handles special characters better
      echo "$USERNAME:$PASSWORD" | chpasswd || {
        echo "[$(date)] Error: Failed to set password for system user $USERNAME (chpasswd)" | tee -a "$LOGFILE"
        exit 1
      }
  else
      # Create user without password (e.g., SSH key only)
       retry_command "useradd -m -s /bin/bash $USERNAME" || {
        echo "[$(date)] Error: Failed to create system user $USERNAME (no password)" | tee -a "$LOGFILE"
        exit 1
      }
  fi

  # Add to sudo group (adjust group name if necessary, e.g., 'wheel' on some systems)
  add_user_to_group "$USERNAME" "sudo" # add_user_to_group is from common.sh

  echo "[$(date)] System user $USERNAME created successfully" >> "$LOGFILE"
}

# Function to create the Proxmox VE user and grant permissions
create_proxmox_user() {
  echo "[$(date)] Creating Proxmox VE user: $USERNAME" >> "$LOGFILE"
  # Check if PVE user already exists (pveum user list outputs colon-separated values)
  if pveum user list --output-format json | jq -r '.[].userid' | grep -q "^${USERNAME}@pve$"; then
    echo "[$(date)] Proxmox VE user $USERNAME@pve already exists, skipping creation" >> "$LOGFILE"
    return 0
  fi

  # Create PVE user - Escape password properly for the shell
  retry_command "pveum user add $USERNAME@pve --password '$(printf '%q' "$PASSWORD")'" || {
    echo "[$(date)] Error: Failed to create Proxmox VE user $USERNAME@pve" | tee -a "$LOGFILE"
    exit 1
  }

  # Grant Admin role (adjust role if needed)
  retry_command "pveum acl modify / -user $USERNAME@pve -role Administrator" || {
    echo "[$(date)] Error: Failed to grant Administrator role to $USERNAME@pve" | tee -a "$LOGFILE"
    exit 1
  }

   echo "[$(date)] Proxmox VE user $USERNAME@pve created and granted Administrator role successfully" >> "$LOGFILE"
}

# Function to set up the SSH key for the user
setup_ssh_key() {
  if [[ -z "$SSH_PUBLIC_KEY" ]]; then
    echo "[$(date)] No SSH public key provided, skipping SSH key setup for $USERNAME" >> "$LOGFILE"
    return 0
  fi

  echo "[$(date)] Setting up SSH key for user: $USERNAME" >> "$LOGFILE"
  local user_home
  user_home=$(eval echo ~$USERNAME) || {
    echo "[$(date)] Error: Could not determine home directory for $USERNAME" | tee -a "$LOGFILE"
    exit 1
  }
  local ssh_dir="$user_home/.ssh"
  local auth_keys_file="$ssh_dir/authorized_keys"

  # Create .ssh directory
  mkdir -p "$ssh_dir" || {
    echo "[$(date)] Error: Failed to create .ssh directory for $USERNAME" | tee -a "$LOGFILE"
    exit 1
  }
  chown "$USERNAME:$USERNAME" "$ssh_dir" || {
     echo "[$(date)] Error: Failed to set ownership for $ssh_dir" | tee -a "$LOGFILE"
    exit 1
  }
  chmod 700 "$ssh_dir" || {
     echo "[$(date)] Error: Failed to set permissions for $ssh_dir" | tee -a "$LOGFILE"
    exit 1
  }

  # Add public key to authorized_keys
  echo "$SSH_PUBLIC_KEY" >> "$auth_keys_file" || {
    echo "[$(date)] Error: Failed to write SSH key to $auth_keys_file" | tee -a "$LOGFILE"
    exit 1
  }
  chown "$USERNAME:$USERNAME" "$auth_keys_file" || {
     echo "[$(date)] Error: Failed to set ownership for $auth_keys_file" | tee -a "$LOGFILE"
    exit 1
  }
  chmod 600 "$auth_keys_file" || {
     echo "[$(date)] Error: Failed to set permissions for $auth_keys_file" | tee -a "$LOGFILE"
    exit 1
  }

  echo "[$(date)] SSH key successfully added for user $USERNAME" >> "$LOGFILE"
}

# --- End of function definitions ---

# Main execution
# Use shared check_root
check_root # From common.sh

echo "[$(date)] Starting phoenix_create_admin_user.sh for user: $USERNAME" >> "$LOGFILE"

# Validate password if provided
if [[ -n "$PASSWORD" ]]; then
    if [[ ! "$PASSWORD" =~ [[:punct:]] || ${#PASSWORD} -lt 8 ]]; then
        echo "[$(date)] Error: Password must be at least 8 characters long and contain at least one special character." | tee -a "$LOGFILE"
        exit 1
    fi
    echo "[$(date)] Validated provided password for user $USERNAME" >> "$LOGFILE"
fi

# Call the functions
create_system_user
create_proxmox_user
setup_ssh_key

echo "[$(date)] Successfully completed phoenix_create_admin_user.sh for user: $USERNAME" >> "$LOGFILE"
exit 0