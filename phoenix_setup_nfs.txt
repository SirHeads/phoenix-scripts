#!/bin/bash
# phoenix_setup_nfs.sh
# Configures NFS server and exports for Proxmox VE
# Version: 1.1.1 (Updated for storageNFS - skip if not present)
# Author: Heads, Grok, Devstral
# Usage: ./phoenix_setup_nfs.sh [--no-reboot]
# Note: Configure log rotation for $LOGFILE using /etc/logrotate.d/proxmox_setup
# Source common functions and configuration variables
source /usr/local/bin/common.sh || { echo "Error: Failed to source common.sh" | tee -a /dev/stderr; exit 1; }
source /usr/local/bin/phoenix_config.sh || { echo "Error: Failed to source phoenix_config.sh" | tee -a /dev/stderr; exit 1; }
# Parse command-line arguments
NO_REBOOT=false
while [[ $# -gt 0 ]]; do
  case $1 in
    --no-reboot)
      NO_REBOOT=true
      shift
      ;;
    *)
      echo "Error: Unknown option $1" | tee -a "$LOGFILE"
      exit 1
      ;;
  esac
done
# Install NFS packages
install_nfs_packages() {
  echo "[$(date)] Installing NFS packages..." >> "$LOGFILE"
  if ! retry_command "apt-get update"; then # Update first
      echo "Error: Failed to update package list" | tee -a "$LOGFILE"
      exit 1
  fi
  if ! retry_command "apt-get install -y nfs-kernel-server nfs-common ufw"; then
    echo "Error: Failed to install NFS packages" | tee -a "$LOGFILE"
    exit 1
  fi
  echo "[$(date)] NFS packages installed" >> "$LOGFILE"
}
# Get server IP in DEFAULT_SUBNET
get_server_ip() {
  local subnet="${DEFAULT_SUBNET:-10.0.0.0/24}"
  if ! check_interface_in_subnet "$subnet"; then
    echo "Error: No network interface found in subnet $subnet" | tee -a "$LOGFILE"
    exit 1
  fi
  local ip
  ip=$(ip addr show | grep -E "inet.*$(echo "$subnet" | cut -d'/' -f1)" | awk '{print $2}' | cut -d'/' -f1 | head -1)
  if [[ -z "$ip" ]]; then
    echo "Error: Failed to determine server IP in subnet $subnet" | tee -a "$LOGFILE"
    exit 1
  fi
  echo "$ip"
}
# Configure NFS exports
configure_nfs_exports() {
  echo "[$(date)] Configuring NFS exports..." >> "$LOGFILE"
  local subnet="${DEFAULT_SUBNET:-10.0.0.0/24}"
  local exports_file="/etc/exports"
  # Check if required pools exist (quickOS and fastData are likely needed)
  if ! zpool list quickOS >/dev/null 2>&1; then
    echo "Error: ZFS pool quickOS does not exist." | tee -a "$LOGFILE"
    exit 1
  fi
  if ! zpool list fastData >/dev/null 2>&1; then
    echo "Error: ZFS pool fastData does not exist." | tee -a "$LOGFILE"
    exit 1
  fi
  # Check for storageNFS pool - make this a warning, not a fatal error
  STORAGE_NFS_POOL=${STORAGE_NFS_POOL:-"storageNFS"} # Fallback if not in config
  if ! zpool list "$STORAGE_NFS_POOL" >/dev/null 2>&1; then
    # --- FIX: Change error to warning and continue ---
    echo "Warning: ZFS pool $STORAGE_NFS_POOL does not exist. Skipping exports for this pool." | tee -a "$LOGFILE"
    # We will filter NFS_DATASET_LIST later based on existing pools
    # exit 1 # Remove this line
    # --- END FIX ---
  else
      echo "[$(date)] Verified ZFS pool $STORAGE_NFS_POOL exists" >> "$LOGFILE"
  fi
  echo "[$(date)] Verified ZFS pools quickOS and fastData exist" >> "$LOGFILE"

  # Backup existing exports file
  if [[ -f "$exports_file" ]]; then
    if ! cp "$exports_file" "$exports_file.bak.$(date +%F_%H-%M-%S)"; then
      echo "Error: Failed to backup $exports_file" | tee -a "$LOGFILE"
      exit 1
    fi
    echo "[$(date)] Backed up $exports_file" >> "$LOGFILE"
  fi
  # Clear existing exports file
  if ! : > "$exports_file"; then
    echo "Error: Failed to clear $exports_file" | tee -a "$LOGFILE"
    exit 1
  fi

  # --- FIX: Filter NFS_DATASET_LIST to only include datasets from existing pools ---
  local filtered_dataset_list=()
  for dataset_full_path in "${NFS_DATASET_LIST[@]}"; do
    # Extract pool name (part before the first '/')
    local pool_name=$(echo "$dataset_full_path" | cut -d'/' -f1)
    # Check if the pool for this dataset exists
    if zpool list "$pool_name" >/dev/null 2>&1; then
        filtered_dataset_list+=("$dataset_full_path")
        echo "[$(date)] Will configure NFS export for dataset: $dataset_full_path (pool $pool_name exists)" >> "$LOGFILE"
    else
        echo "[$(date)] Skipping NFS export for dataset: $dataset_full_path (pool $pool_name does not exist)" >> "$LOGFILE"
    fi
  done
  # Use the filtered list for the rest of the loop
  # --- END FIX ---

  # Configure exports for each dataset in the filtered list
  # This list should now contain datasets only from pools that actually exist
  for dataset_full_path in "${filtered_dataset_list[@]}"; do # Iterate over filtered list
    local zfs_path="$dataset_full_path"
    # Mount point name: replace '/' with '-' for filesystem safety
    local mount_path_name=$(echo "$dataset_full_path" | tr '/' '-')
    local mount_path="$MOUNT_POINT_BASE/$mount_path_name"
    # Get options from NFS_DATASET_OPTIONS using the full path key
    local options="${NFS_DATASET_OPTIONS[$dataset_full_path]:-rw,sync,no_subtree_check,noatime}"
    # --- Verify ZFS dataset exists ---
    if ! zfs list "$zfs_path" >/dev/null 2>&1; then
      echo "Error: ZFS dataset $zfs_path does not exist. Run phoenix_setup_zfs_datasets.sh to create it." | tee -a "$LOGFILE"
      echo "Attempting to list available datasets for debugging:" | tee -a "$LOGFILE"
      zfs list -r "$(dirname "$zfs_path")" 2>&1 | tee -a "$LOGFILE" || true # Don't exit if listing fails
      exit 1
    fi
    # --- Create mount point if it doesn't exist ---
    if ! mkdir -p "$mount_path"; then
      echo "Error: Failed to create mount point $mount_path" | tee -a "$LOGFILE"
      exit 1
    fi
    # --- Ensure ZFS dataset is mounted at the correct path ---
    # Check current mountpoint property
    local current_mountpoint
    current_mountpoint=$(zfs get -H -o value mountpoint "$zfs_path")
    if [[ "$current_mountpoint" != "$mount_path" ]]; then
        echo "[$(date)] Setting mountpoint for $zfs_path from '$current_mountpoint' to '$mount_path'" >> "$LOGFILE"
        if ! zfs set mountpoint="$mount_path" "$zfs_path"; then
            echo "Error: Failed to set mountpoint for $zfs_path to $mount_path" | tee -a "$LOGFILE"
            exit 1
        fi
    else
         echo "[$(date)] Mountpoint for $zfs_path is already correctly set to '$mount_path'" >> "$LOGFILE"
    fi
    # Optional: Double-check it's mounted (zfs set should handle this, but good to verify)
    if ! mount | grep -q " $mount_path "; then
         echo "Warning: $mount_path does not appear to be mounted after setting ZFS mountpoint. Checking ZFS status..." >> "$LOGFILE"
         zfs mount | grep "$zfs_path" >> "$LOGFILE" 2>&1 || echo "ZFS reports $zfs_path is not mounted." >> "$LOGFILE"
         # Try explicit mount if needed (usually not necessary if zfs set worked)
         # zfs mount "$zfs_path" # Uncomment if issues persist
    fi
    # --- Add export to /etc/exports ---
    # Ensure the line doesn't already exist to prevent duplicates (though clearing the file should prevent this)
    if grep -q "^$mount_path " "$exports_file"; then
        echo "Warning: Export line for $mount_path already exists in $exports_file. Skipping addition." >> "$LOGFILE"
    else
        if ! echo "$mount_path $subnet($options)" >> "$exports_file"; then
          echo "Error: Failed to add $mount_path to $exports_file" | tee -a "$LOGFILE"
          exit 1
        fi
        echo "[$(date)] Added NFS export for $zfs_path at $mount_path with options $options" >> "$LOGFILE"
    fi
  done
  # If no exports were configured, warn
  if [[ ${#filtered_dataset_list[@]} -eq 0 ]]; then
      echo "[$(date)] Warning: No NFS datasets found for existing pools. No exports configured." >> "$LOGFILE"
  fi
  # --- Restart NFS service to apply exports ---
  echo "[$(date)] Refreshing and restarting NFS exports/services..." >> "$LOGFILE"
  if ! retry_command "exportfs -ra"; then
    echo "Error: Failed to refresh NFS exports (exportfs -ra)" | tee -a "$LOGFILE"
    # Provide more debug info
    echo "Contents of $exports_file:" | tee -a "$LOGFILE"
    cat "$exports_file" | tee -a "$LOGFILE"
    exit 1
  fi
  # Restarting the service is usually more reliable than just reloading
  if ! retry_command "systemctl restart nfs-server nfs-kernel-server 2>/dev/null || systemctl restart nfs-kernel-server"; then
    echo "Error: Failed to restart NFS service" | tee -a "$LOGFILE"
    # Check service status
    systemctl status nfs-server nfs-kernel-server 2>&1 | tee -a "$LOGFILE"
    exit 1
  fi
  echo "[$(date)] NFS exports configured and service restarted" >> "$LOGFILE"
}
# Configure firewall for NFS
configure_nfs_firewall() {
  echo "[$(date)] Configuring firewall for NFS..." >> "$LOGFILE"
  local subnet="${DEFAULT_SUBNET:-10.0.0.0/24}"
  # Allow NFS service (uses rules defined in /etc/services)
  if ! retry_command "ufw allow from $subnet to any port nfs"; then
    echo "Error: Failed to allow NFS service in firewall (ufw allow nfs)" | tee -a "$LOGFILE"
    # Fallback to specific ports if 'nfs' alias fails
    echo "[$(date)] Trying fallback to specific ports..." >> "$LOGFILE"
    if ! retry_command "ufw allow from $subnet to any port 111"; then
        echo "Error: Failed to allow port 111 (rpcbind) in firewall" | tee -a "$LOGFILE"
        exit 1
    fi
    if ! retry_command "ufw allow from $subnet to any port 2049"; then
         echo "Error: Failed to allow port 2049 (nfs) in firewall" | tee -a "$LOGFILE"
         exit 1
    fi
  fi
  echo "[$(date)] Firewall configured for NFS" >> "$LOGFILE"
}
# Add NFS storage to Proxmox
add_nfs_storage() {
  echo "[$(date)] Adding NFS storage to Proxmox..." >> "$LOGFILE"
  if ! command -v pvesm >/dev/null 2>&1; then
    echo "Error: pvesm command not found. Ensure this script is running on a Proxmox VE node." | tee -a "$LOGFILE"
    exit 1
  fi
  local server_ip
  server_ip=$(get_server_ip)

  # --- FIX: Filter NFS_DATASET_LIST for Proxmox storage addition as well ---
  local filtered_dataset_list=()
  for dataset_full_path in "${NFS_DATASET_LIST[@]}"; do
    local pool_name=$(echo "$dataset_full_path" | cut -d'/' -f1)
    if zpool list "$pool_name" >/dev/null 2>&1; then
        filtered_dataset_list+=("$dataset_full_path")
        echo "[$(date)] Will add NFS storage for dataset: $dataset_full_path (pool $pool_name exists)" >> "$LOGFILE"
    else
        echo "[$(date)] Skipping NFS storage addition for dataset: $dataset_full_path (pool $pool_name does not exist)" >> "$LOGFILE"
    fi
  done
  # --- END FIX ---

  # Iterate through the filtered dataset list to add storage
  for dataset_full_path in "${filtered_dataset_list[@]}"; do # Use filtered list
    # Get storage type and content info from DATASET_STORAGE_TYPES config
    local storage_info="${DATASET_STORAGE_TYPES[$dataset_full_path]}"
    if [[ -z "$storage_info" ]]; then
      echo "[$(date)] Skipping $dataset_full_path for NFS storage (not defined in DATASET_STORAGE_TYPES)" >> "$LOGFILE"
      continue
    fi
    local storage_type=$(echo "$storage_info" | cut -d':' -f1)
    local content_type=$(echo "$storage_info" | cut -d':' -f2)
    # Only process if the config explicitly marks it as 'nfs'
    if [[ "$storage_type" != "nfs" ]]; then
      echo "[$(date)] Skipping $dataset_full_path for NFS storage (defined as $storage_type in DATASET_STORAGE_TYPES)" >> "$LOGFILE"
      continue
    fi
    # Derive storage name and export path
    local storage_name="nfs-$(echo "$dataset_full_path" | tr '/' '-')"
    local mount_path_name=$(echo "$dataset_full_path" | tr '/' '-')
    local export_path="$MOUNT_POINT_BASE/$mount_path_name" # This must match the path exported
    # --- Verify export is active on the server ---
    echo "[$(date)] Checking if export $export_path is available on $server_ip..." >> "$LOGFILE"
    if ! showmount -e "$server_ip" | grep -q "$(echo "$export_path" | sed 's/\//\\\//g')"; then # Escape slashes for grep
      echo "Error: NFS export $export_path not available on $server_ip according to showmount." | tee -a "$LOGFILE"
      echo "Debug: Output of 'showmount -e $server_ip':" | tee -a "$LOGFILE"
      showmount -e "$server_ip" 2>&1 | tee -a "$LOGFILE"
      echo "Debug: Checking if NFS service is running:" | tee -a "$LOGFILE"
      systemctl is-active nfs-server nfs-kernel-server 2>&1 | tee -a "$LOGFILE"
      exit 1
    fi
    echo "[$(date)] Confirmed export $export_path is available on $server_ip." >> "$LOGFILE"
    # --- Check if storage already exists in Proxmox ---
    if pvesm status | grep -q "^$storage_name "; then # Match beginning of line and add space to avoid partial matches
      echo "[$(date)] Proxmox storage $storage_name already exists, skipping addition" >> "$LOGFILE"
      continue
    fi
    # --- Create a dedicated local mount point for the NFS storage in Proxmox ---
    local local_mount="/mnt/nfs/$storage_name"
    if ! mkdir -p "$local_mount"; then
      echo "Error: Failed to create local mount point $local_mount for Proxmox NFS storage" | tee -a "$LOGFILE"
      exit 1
    fi
    # --- Add NFS storage to Proxmox using pvesm ---
    # Using vers=4,2,3 allows negotiation. vers=4 is generally preferred.
    echo "[$(date)] Adding NFS storage $storage_name to Proxmox..." >> "$LOGFILE"
    if ! retry_command "pvesm add nfs $storage_name --server $server_ip --export $export_path --content $content_type --path $local_mount --options vers=4,soft,timeo=30,retrans=3"; then
      echo "Error: Failed to add NFS storage $storage_name using pvesm" | tee -a "$LOGFILE"
      # Provide debug info
      echo "Debug: pvesm command that failed:" | tee -a "$LOGFILE"
      echo "pvesm add nfs $storage_name --server $server_ip --export $export_path --content $content_type --path $local_mount --options vers=4,soft,timeo=30,retrans=3" | tee -a "$LOGFILE"
      exit 1
    fi
    echo "[$(date)] Successfully added NFS storage $storage_name for $export_path at $local_mount with content $content_type" >> "$LOGFILE"
  done
  # If no storage was added, note it
  if [[ ${#filtered_dataset_list[@]} -eq 0 ]]; then
      echo "[$(date)] Warning: No NFS datasets found for existing pools. No Proxmox storage added." >> "$LOGFILE"
  fi
}
# Main execution
main() {
  # setup_logging # Assume handled by orchestrator
  check_root
  install_nfs_packages
  configure_nfs_exports
  configure_nfs_firewall
  add_nfs_storage
  if [[ "$NO_REBOOT" == false ]]; then
    echo "[$(date)] Forcing reboot to apply NFS changes in 10 seconds. Press Ctrl+C to cancel." | tee -a "$LOGFILE"
    sleep 10
    reboot
  else
    echo "[$(date)] Reboot skipped due to --no-reboot flag. Please reboot manually to apply NFS changes." | tee -a "$LOGFILE"
  fi
}
main # Call the main function
echo "[$(date)] Successfully completed NFS setup" >> "$LOGFILE"
exit 0
