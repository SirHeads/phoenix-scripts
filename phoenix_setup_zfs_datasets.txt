#!/bin/bash
# phoenix_setup_zfs_datasets.sh
# Creates ZFS datasets for quickOS, fastData, and optionally storageNFS pools based on configuration.
# Version: 1.3.1 (Updated for storageNFS - skip if not present)
# Author: Heads, Grok, Devstral
# Source common functions and configuration
source /usr/local/bin/common.sh || { echo "[$(date)] Error: Failed to source common.sh" | tee -a /dev/stderr; exit 1; }
source /usr/local/bin/phoenix_config.sh || { echo "[$(date)] Error: Failed to source phoenix_config.sh" | tee -a /dev/stderr; exit 1; }
check_root
# setup_logging # Assume handled by orchestrator
LOGFILE="/var/log/proxmox_setup.log" # Fallback if not set by orchestrator
echo "[$(date)] Starting phoenix_setup_zfs_datasets.sh" >> "$LOGFILE"
# Load configuration to get dataset lists and properties
# This is crucial as the lists/properties are defined there
load_config
# --- Function to create datasets for a given pool ---
# Arguments:
# $1: Pool Name (e.g., "quickOS")
# $2: Dataset List Name (e.g., "QUICKOS_DATASET_LIST")
# $3: Dataset Properties Array Name (e.g., "QUICKOS_DATASET_PROPERTIES")
create_datasets_for_pool() {
    local pool_name="$1"
    local list_name_ref="$2"  # Name of the variable holding the list
    local props_name_ref="$3" # Name of the variable holding the properties associative array
    # Use nameref (declare -n) for indirect reference to arrays (Bash 4.3+)
    declare -n dataset_list_ref="$list_name_ref"
    declare -n dataset_props_ref="$props_name_ref"
    # Check if the pool exists
    if ! zfs_pool_exists "$pool_name"; then
        # --- FIX: Skip dataset creation if pool doesn't exist, instead of exiting ---
        echo "[$(date)] Warning: ZFS pool $pool_name does not exist. Skipping dataset creation for this pool." >> "$LOGFILE"
        return 0 # Return success to continue script execution
        # --- END FIX ---
    fi
    echo "[$(date)] Creating datasets for pool: $pool_name" >> "$LOGFILE"
    # Iterate through the dataset list for this pool
    for dataset_name in "${dataset_list_ref[@]}"; do
        local mountpoint="$MOUNT_POINT_BASE/$dataset_name"
        # Get properties string from the associative array using the dataset name as key
        local properties_string="${dataset_props_ref[$dataset_name]}"
        # Handle empty properties string gracefully
        if [[ -z "$properties_string" ]]; then
            echo "[$(date)] Warning: No properties defined for dataset $pool_name/$dataset_name. Creating with default settings and mountpoint." >> "$LOGFILE"
            # Create dataset with just the mountpoint if no properties are specified
             create_zfs_dataset "$pool_name" "$dataset_name" "$mountpoint"
        else
            # Convert comma-separated properties string into an array suitable for zfs create -o flags
            # We need to prefix each property=value pair with '-o'
            local props_array=()
            IFS=',' read -ra props_split <<< "$properties_string"
            for prop in "${props_split[@]}"; do
                # Trim whitespace (important if there are spaces after commas)
                prop=$(echo "$prop" | xargs)
                if [[ -n "$prop" ]]; then # Check if trimmed prop is not empty
                    props_array+=("-o" "$prop")
                fi
            done
            # Call create_zfs_dataset with pool, dataset, mountpoint, and the -o property flags
            create_zfs_dataset "$pool_name" "$dataset_name" "$mountpoint" "${props_array[@]}"
        fi
    done
    echo "[$(date)] Finished creating datasets for pool: $pool_name" >> "$LOGFILE"
}
# --- Create datasets for each pool ---
# 1. Create datasets for quickOS pool
create_datasets_for_pool "$QUICKOS_POOL" "QUICKOS_DATASET_LIST" "QUICKOS_DATASET_PROPERTIES"
# 2. Create datasets for fastData pool
create_datasets_for_pool "$FASTDATA_POOL" "FASTDATA_DATASET_LIST" "FASTDATA_DATASET_PROPERTIES"
# 3. Create datasets for storageNFS pool (only if it exists)
# Ensure the pool name variable is loaded from config
STORAGE_NFS_POOL=${STORAGE_NFS_POOL:-"storageNFS"} # Fallback if not in config
create_datasets_for_pool "$STORAGE_NFS_POOL" "STORAGE_NFS_DATASET_LIST" "STORAGE_NFS_DATASET_PROPERTIES"
echo "[$(date)] Successfully completed phoenix_setup_zfs_datasets.sh" >> "$LOGFILE"
exit 0
