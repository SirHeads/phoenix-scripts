#!/bin/bash
# phoenix_setup_zfs_pools.sh
# Configures ZFS pools (quickOS and fastData) on Proxmox VE for the Phoenix server.
# Version: 1.2.2 (3-drive setup)
# Author: Heads, Grok, Devstral

# Source common functions and configuration
# Assumes LOGFILE is set by the orchestrator (create_phoenix.sh)
source /usr/local/bin/common.sh || { echo "[$(date)] Error: Failed to source common.sh" | tee -a /dev/stderr; exit 1; }
source /usr/local/bin/phoenix_config.sh || { echo "[$(date)] Error: Failed to source phoenix_config.sh" | tee -a /dev/stderr; exit 1; }
# load_config # Properties used here are likely static or passed via arguments

# Parse command-line arguments for drives
QUICKOS_DRIVES=()
FASTDATA_DRIVE=""

while getopts "q:f:" opt; do # Only 'q' and 'f'
  case $opt in
    q)
      # Expecting two space-separated drives
      IFS=' ' read -r -a QUICKOS_DRIVES <<< "$OPTARG"
      if [[ ${#QUICKOS_DRIVES[@]} -ne 2 ]]; then
          echo "[$(date)] Error: -q requires exactly two drives." | tee -a "$LOGFILE"
          exit 1
      fi
      ;;
    f)
      FASTDATA_DRIVE="$OPTARG"
      ;;
    \?) # Handle invalid options
      echo "[$(date)] Invalid option: -$OPTARG" | tee -a "$LOGFILE" >&2
      exit 1
      ;;
    :) # Handle missing arguments
      echo "[$(date)] Option -$OPTARG requires an argument." | tee -a "$LOGFILE" >&2
      exit 1
      ;;
  esac
done

# Validate drive arguments (Only check for -q and -f)
if [[ ${#QUICKOS_DRIVES[@]} -ne 2 || -z "$FASTDATA_DRIVE" ]]; then
    echo "[$(date)] Error: Both -q (two drives) and -f (one drive) are required." | tee -a "$LOGFILE" # Corrected error message
    exit 1
fi

check_root
# setup_logging # Assume handled by orchestrator

echo "[$(date)] Starting phoenix_setup_zfs_pools.sh" >> "$LOGFILE"
echo "[$(date)] Drives - quickOS: ${QUICKOS_DRIVES[*]}, fastData: $FASTDATA_DRIVE" >> "$LOGFILE" # Log only relevant drives

# --- Create/Check quickOS Pool ---
if zfs_pool_exists "$QUICKOS_POOL"; then
    echo "[$(date)] Pool $QUICKOS_POOL already exists, skipping creation" >> "$LOGFILE"
else
    # Create quickOS mirrored pool
    retry_command "zpool create -f -o autotrim=on -O compression=lz4 -O atime=off $QUICKOS_POOL mirror ${QUICKOS_DRIVES[*]}" || {
        echo "[$(date)] Error: Failed to create $QUICKOS_POOL pool" | tee -a "$LOGFILE"
        exit 1
    }
    echo "[$(date)] Created ZFS pool $QUICKOS_POOL on ${QUICKOS_DRIVES[*]}" >> "$LOGFILE"
fi

# --- Create/Check fastData Pool ---
if zfs_pool_exists "$FASTDATA_POOL"; then
    echo "[$(date)] Pool $FASTDATA_POOL already exists, skipping creation" >> "$LOGFILE"
else
    # Create fastData pool
    retry_command "zpool create -f -o autotrim=on -O compression=lz4 -O atime=off $FASTDATA_POOL $FASTDATA_DRIVE" || {
        echo "[$(date)] Error: Failed to create $FASTDATA_POOL pool" | tee -a "$LOGFILE"
        exit 1
    }
    echo "[$(date)] Created ZFS pool $FASTDATA_POOL on $FASTDATA_DRIVE" >> "$LOGFILE"
fi

# Placeholder for monitor_nvme_wear and check_system_ram if needed
# These functions would need to be defined or sourced.

echo "[$(date)] Successfully completed phoenix_setup_zfs_pools.sh" >> "$LOGFILE"
exit 0